########################################################################
########################################################################
#
# Miscellaneous notes on
# ATS3/Xanadu design and implementation
#
########################################################################
########################################################################

(*
HX-2024-06-29
Sat 29 Jun 2024 07:04:40 PM EDT
*)

I have long thought about writing a definitive book (or even several
books) on ATS. There is certainly a lot to write about. And I need to
get started ASAP.

This file acts like a bag for collecting miscellaneous notes on ATS,
which will later be processed to produce proper book contents.

########################################################################
########################################################################

(*
Sat 29 Jun 2024 08:11:02 PM EDT
*)

My early experience on programming:

In 1984, I took a programming class on Algol 60 when I was a junior at
Nanjing University, China. This was my first exposure to programming
on a real computer. Please note that each of us in the class could
have access to a real computer for only ONE hour during the entire
semester. Basically, we had to write code on paper and double-check it
before typing the code into a computer. I can now remember very little
about what I learned in the class except for the fact that I did enjoy
programming IMMENSELY. I voluntarily did homework for some of my
classmates so that I could use their alloted computer time. However,
after the programming class, I did not get a chance to continue
programming. I switched back to studying mathematical logic.

As far as programming is of the concern, I did practically next to
nothing between 1985 and 1990. I suppose I learned a little bit about
Pascal and Basic, though.

I moved to Shanghai Jiao Tong University in 1988. I started to learn C
around 1990. I used Turbo C (running on MS-DOS) for learning C, which
was a popular integrated development environment (IDE) and compiler
for the C programming language from Borland.

########################################################################
########################################################################

(*
Sat 29 Jun 2024 08:11:20 PM EDT
*)
The overall implementation of ATS3/Xanadu

lexing0: lexing is implemented manually. Nothing special. Just a lot of
mutually recursively defined functions.

parsing: parsing is implemented manually. Nothing special. Just a lot of
mutually recursively defined functions.

There are two official file name extensions in use: 'sats' and 'dats',
where 's' and 'd' mean 'static' and 'dynamic', respectively.

Other file name extensions (e.g., cats and hats) are conventional; they
are not enforced by the parser for ATS3/Xanadu.

########################################################################
########################################################################

(*
Mon 01 Jul 2024 11:53:28 PM EDT
*)
ATS3/Xanadu:xats2js:

The runtime-library is now written in ECMASCRIPT6 (ES6).
And we can use google-closure-compiler to translate ES6 to ES3.
It can also be readily done to write the runtime-library in ES3 directly.

########################################################################
########################################################################
What is a project in ATS3 like?
(*
Fri 05 Jul 2024 05:58:48 PM EDT
*)
########################################################################

Let us say that the home directory for the project is MYPROJ.
One should probably have a file MYPROJ/README for describing
the project.

In MYPROJ, the following directories can be expected:

MYPROJ/bin: For executables produced by the project
MYPROJ/lib: For library code produced by the project

MYPROJ/SATS:
For storing SATS files containing typedefs and interfaces

MYPROJ/DATS:
For storing DATS files implementing the interfaces in MYPROJ/SATS

MYPROJ/HATS:
For various loading scripts (for loading SATS files and DATS files)

MYPROJ/DOCS: For documentation of all sorts
MyPROJ/TEST: For storing testing code of all sorts

MYPROJ/BUILD: For storing the files generated from building MYPROJ

########################################################################
########################################################################
What is lense in ATS3?
(*
Sun Dec 22 10:13:24 PM EST 2024
*)
########################################################################

I coined the word 'lense' in 2024, which loosely corresponds to the
word 'tense'. Of course, I have been aware the notion of lense since
ATSproto, the prototype of ATS (referred to as ATS0), which I
implemented during the summer of 2003. I used OCaml for the implementation.

Generally speaking, a verb can indicate two kinds of use of its
object: consumptive use and non-consumptive use. For instance, in the
sentence "I eat a cake", the verb 'eat' makes consumptive use; in the
sentence, "I read a book", the verb 'read' makes non-consumptive
use. In programming, the name of a function is often chosen to be a
verb that indicates the action performed by a call to the function. We
use the suffix '0' (resp. '1') in the name of a function to indicate
that its action is consumptive (resp. non-consumptive). For instance,
the consumptive lense of 'read' is 'read0' and the non-consumptive lense
of 'read' is 'read1'.

########################################################################
########################################################################
(*
Sun Dec 22 10:17:32 PM EST 2024
*)
Some conventions for naming a function in ATS3.

I expect widely extended support for many forms of meta-programming in
ATS3. While one can indeed name a function in ATS3 in whatever way that
one sees fit, there are some grammar-like conventions that one can and
probably should follow so as to greatly simplify the task of searching
for a named function based on its functionality. Let us see some examples.

The function for concatenating two given lists is declared as follows:

fun
<a:type>
list_append$list_list(xs: list(a), ys: list(a)): list(a)

There are three parts in the name 'list_append$list_list' that are separated
by the symbol '_'.

1. The 1st part 'list' states that the first argument 'xs' is a list.
2. The 2nd part 'append$list' indicates that the verb name of the function
   is 'append' and it takes an additional argument 'ys' that is a list.
3. The 3rd part 'list' states that the return value of the function is a list.

Some short names can be introduced for 'list_append$list_list' as follows:

#symload append with list_append$list_list
#symload list_append with list_append$list_list

The function for flattening a given list of strings into a string is
declared as follows:

fun
<a:type>
list$strn_flatten_list(xss: list(strn)): strn

The function for flattening a given list of lists is declared as follows:

fun
<a:type>
list$list_flatten_list(xss: list(list(a))): list(a)

(*
Mon Jan 20 10:36:46 AM EST 2025
*)

The verb 'make' is special in the sense that it requires that
the type of the returned value precedes it. For instance, the following
function turns a list of chars into a string:

fun strn_make_list(cs: list(char)): strn

(or if we attempt to be more precise:

fun strn_make_list$char(cs: list(char)): strn

)

If 'make' was not treated specially, this function would be given
the name 'list_make_strn' (or list$char_make_strn)

########################################################################
########################################################################
