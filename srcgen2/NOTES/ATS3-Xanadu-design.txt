########################################################################
#
# Overview of ATS3/Xanadu Design
#
########################################################################

Like 'foot', 'interpreter' is also a measurement unit.

ATS3/Xanadu consists of a series of interpreters and it is expected to
be further extended with interpreters so as to accommodate more features.

########################################################################

Level-0 syntax:
staexp0.sats and dynexp0.sats

The level-0 syntax is for parsing (one form of) ATS3 source.

########################################################################

Level-1 syntax:
staexp1.sats and dynexp1.sats

The level-1 syntax is for resolving operator fixities. In ATS3, there
is support for prefix, infix, and postfix operators.

########################################################################

Level-2 syntax:
staexp2.sats and dynexp2.sats

The level-2 syntax is for resolving name bindings of all sorts.

########################################################################

Level-3 syntax:
only dynexp3.sats for dynamics

########################################################################

(*
HX-2023-12-24:
Sun Dec 24 10:53:50 EST 2023
*)

Let me specify
the meaning of some pattern modifiers.

(
HX-2024-05-26:
Without modification:
C(x1, x2) folds automatically at the end
This is implied by the requirement that x1 and x2
have the same type as the originally assigned ones
)

~: for freeing:
HX-2025-09-03:
~x: what matches x is freed // not needed!
How about just using _ for freeing linear values
~C(x1, x2):
the constructor is freed but x1 and x2 are not.
Note that both x1 and x2 are names (not variables)

(
@: HX: used to be for flatness
@: HX: explicit folding/freeing
@C(x1, x2) matches unfolded constructor?
)
Note that @C(x1, x2) indicates that either folding
or freeing needs to be applied explicitly, which is
the programmer's responsibility.

HX-2024-02-26:
In particular, no folding is applied automatically,
and a type-check error is issued if folding is needed.

!: for addressing
!x: x is a variable (instead of a variname)
!C(x1, x2) = C(!x1, !x2)
!C(!x1, x2) = C(!!x1, !x2) = C(x1, !x2) // !!x1 = x1

HX-2024-02-26:
Note that folding is applied automatically at the end
(if folding is not yet done).

HX-2024-05-26: Please see [trans2a_dynexp.dats] for details!

########################################################################

HX-2024-01-07:

No inheritance for objtypes:

#objtype
mylist2(a:type) = @{
(*
'@{'/'${': flat/boxed
*)
//
  val xs: list_vt(a)
  var ys: list_vt(a)
//
  #initfn
  init
  ( // self: &(?mylist2(a)) >> mylist2(a)
    xs: list(a)
  , ys: list(a)): void =
  (self.xs := g_copy(xs);
   self.ys := g_copy(ys))
//
  #freefn
  strmize
  ( // self: &(mylist2(a)) >> ?mylist2(a)
  ) : strm_vt(a) =
  strm_vt_append
  (strmize0(self.xs), strmize0(self.ys))

  #freefn
  destroy
  ( // self: &(mylist2(a)) >> ?mylist2(a)
  ) : strm_vt(a) =
  (g_free(self.xs)); g_free(self.ys))

  #method
  strmize
  ( // self: &(mylist2(a)) >> mylist2(a)
  ): strm_vt(a) =
  strm_vt_append
  (strmize1(self.xs), strmize1(self.ys))
//
}

And some form(s) of inheritance for clstypes:

#clstype mylist2(a:type) = @{ ...... ...... }

Note that clstypes are different from objtypes;
the former can/should be manually built based on
the latter!

########################################################################

(*
//
HX-2024-01-13:
Should generative excptcons be supported?
//
I would say no at this point. This feature does not seem to
be particularly useful and it complicates reasoning greatly.
Also, it can be readily added later if needed.
*)
fun
foo
{a:type}
(x:a, b:bool): a =
let
excptcon MyErrorExn of a
(*
HX-2024-07-07:
For generative version:
excptgen MyErrorExn of a
*)
in//let
try
  if (b)
  then foo(42, b-1) else raise MyErrorExn(x)
with MyErrorExn(x) => ( x )
end

########################################################################
//
HX-2024-03-01:
Handling assigments:
//
x := y // assign
x :=: y // exchange
x :=> y // assign+return
//
// x <- y: for aliasing???
//
########################################################################
