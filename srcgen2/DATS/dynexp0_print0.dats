(***********************************************************************)
(*                                                                     *)
(*                         Applied Type System                         *)
(*                                                                     *)
(***********************************************************************)

(*
** ATS/Xanadu - Unleashing the Potential of Types!
** Copyright (C) 2022 Hongwei Xi, ATS Trustful Software, Inc.
** All rights reserved
**
** ATS is free software;  you can  redistribute it and/or modify it under
** the terms of  the GNU GENERAL PUBLIC LICENSE (GPL) as published by the
** Free Software Foundation; either version 3, or (at  your  option)  any
** later version.
** 
** ATS is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without  even  the  implied  warranty  of MERCHANTABILITY or
** FITNESS FOR A PARTICULAR PURPOSE.  See the  GNU General Public License
** for more details.
** 
** You  should  have  received  a  copy of the GNU General Public License
** along  with  ATS;  see the  file COPYING.  If not, please write to the
** Free Software Foundation,  51 Franklin Street, Fifth Floor, Boston, MA
** 02110-1301, USA.
*)

(* ****** ****** *)
//
(*
Author: Hongwei Xi
Start Time: June 19th, 2022
Authoremail: gmhwxiATgmailDOTcom
*)
//
(* ****** ****** *)
(* ****** ****** *)
#define
ATS_PACKNAME
"ATS3.XANADU.xatsopt-20220500"
(* ****** ****** *)
(* ****** ****** *)
//
#include
"./../HATS/xatsopt_sats.hats"
(*
#include
"./../HATS/xatsopt_dats.hats"
*)
#include
"./../HATS/xatsopt_dpre.hats"
//
(* ****** ****** *)
(* ****** ****** *)
#staload "./../SATS/locinfo.sats"
(* ****** ****** *)
#staload "./../SATS/lexing0.sats"
(* ****** ****** *)
#staload "./../SATS/staexp0.sats"
#staload "./../SATS/dynexp0.sats"
(* ****** ****** *)
#symload node with q0arg_get_node
#symload node with s0qag_get_node
#symload node with t0qag_get_node
#symload node with t0iag_get_node
(* ****** ****** *)
#symload node with d0exp_get_node
#symload node with d0pat_get_node
#symload node with d0ecl_get_node
(* ****** ****** *)
#symload dpid with d0cstdcl_get_dpid
#symload darg with d0cstdcl_get_darg
#symload sres with d0cstdcl_get_sres
#symload dres with d0cstdcl_get_dres
(* ****** ****** *)
#symload dpat with d0valdcl_get_dpat
#symload wsxp with d0valdcl_get_wsxp
#symload tdxp with d0valdcl_get_tdxp
(* ****** ****** *)
#symload dpid with d0vardcl_get_dpid
#symload vpid with d0vardcl_get_vpid
#symload sres with d0vardcl_get_sres
#symload dini with d0vardcl_get_dini
(* ****** ****** *)
#symload dpid with d0fundcl_get_dpid
#symload farg with d0fundcl_get_farg
#symload sres with d0fundcl_get_sres
#symload tdxp with d0fundcl_get_tdxp
#symload wsxp with d0fundcl_get_wsxp
(* ****** ****** *)

#implfun
d0pat_fprint
( d0p, out ) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+
d0p.node() of
//
|
D0Pid0(id0) =>
prints("D0Pid0(",id0,")")
//
|
D0Pint(int) =>
prints("D0Pint(",int,")")
|
D0Pchr(chr) =>
prints("D0Pchr(",chr,")")
|
D0Pflt(flt) =>
prints("D0Pflt(",flt,")")
|
D0Pstr(str) =>
prints("D0Pstr(",str,")")
//
|
D0Papps(d0ps) =>
prints("D0Papps(", d0ps, ")")
//
|
D0Psarg
(tbeg,s0as,tend) =>
prints
("D0Psarg(",tbeg,";",s0as,";",tend,")")
//
|
D0Plpar
(tbeg,t0ps,tend) =>
prints
("D0Plpar(",tbeg,";",t0ps,";",tend,")")
//
|
D0Ptup1
(tbeg,topt,d0ps,tend) =>
(
print("D0Ptup1(");
prints(tbeg,";",topt,";",d0ps,";",tend,")"))
|
D0Prcd2
(tbeg,topt,ldps,tend) =>
(
print("D0Prcd2(");
prints(tbeg,";",topt,";",ldps,";",tend,")"))
//
|
D0Pannot(d0p1,s0e2) =>
prints("D0Pannot(",d0p1,";",s0e2,")")
//
|
D0Ptkerr(tok) => prints("D0Ptkerr(",tok,")")
|
D0Perrck // HX: generated by [preadx0]
(lvl1(*err-level*),d0p2) => prints("D0Perrck(",lvl1,";",d0p2,")")
//
end (*let*) // end of [d0pat_fprint(d0p,out)]

(* ****** ****** *)

#implfun
f0arg_fprint
( f0a, out ) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+
f0a.node() of
|
F0ARGnone(tok) =>
prints("F0ARGnone(",tok,")")
|
F0ARGdapp(d0p) =>
prints("F0ARGdapp(",d0p,")")
|
F0ARGsapp(tkb,sqs,tke) =>
prints
("F0ARGsapp(",tkb,";",sqs,";",tke,")")
|
F0ARGmets(tkb,ses,tke) =>
prints
("F0ARGmets(",tkb,";",ses,";",tke,")")
//
end (*let*) // end of [f0arg_fprint(f0a,out)]

(* ****** ****** *)

#implfun
d0gua_fprint
( dgua, out ) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+
dgua.node() of
|
D0GUAexp(d0e1) =>
prints("D0GUAexp(",d0e1,")")
|
D0GUAmat(d0e1,tkas,d0p2) =>
(
prints
("D0GUAmat(",d0e1,";",tkas,";",d0p2,")"))
//
end (*let*) // end of [d0gua_fprint(dgua,out)]

(* ****** ****** *)
//
#implfun
d0cls_fprint
( dcls, out ) =
let
#impltmp
g_print$out<>() = out
in//let
case+
dcls.node() of
|
D0CLSgpt(dgpt) =>
prints("D0CLSgpt(",dgpt,")")
|
D0CLScls
(d0g1,tsep,d0e2) =>
(
prints
("D0CLScls(",d0g1,";",tsep,";",d0e2,")"))
end (*let*) // end of [d0cls_fprint(dcls,out)]
//
#implfun
d0gpt_fprint
( dgpt, out ) =
let
#impltmp
g_print$out<>() = out
in//let
case+
dgpt.node() of
|
D0GPTpat(d0p1) =>
prints("D0GPTpat(",d0p1,")")
|
D0GPTgua
(d0p1,tsep,d0gs) =>
(
prints
("D0GPTgua(",d0p1,";",tsep,";",d0gs,")"))
end (*let*) // end of [d0gpt_fprint(dgpt,out)]
//
(* ****** ****** *)

#implfun
d0exp_fprint
( d0e, out ) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+
d0e.node() of
//
|
D0Eid0(id0) =>
prints("D0Eid0(",id0,")")
//
|
D0Eint(int) =>
prints("D0Eint(",int,")")
|
D0Echr(chr) =>
prints("D0Echr(",chr,")")
|
D0Eflt(flt) =>
prints("D0Eflt(",flt,")")
|
D0Estr(str) =>
prints("D0Estr(",str,")")
//
|
D0Eapps(d0es) =>
prints("D0Eapps(",d0es,")")
//
|
D0Esarg
(tbeg,s0es,tend) =>
prints
("D0Esarg(",tbeg,";",s0es,";",tend,")")
|
D0Etarg
(tbeg,s0es,tend) =>
prints
("D0Etarg(",tbeg,";",s0es,";",tend,")")
//
|
D0Elpar
(tbeg,d0es,tend) =>
prints
( "D0Elpar(",tbeg,";",d0es,";",tend,")" )
//
|
D0Eift0
(tknd,d0e1,dthn,dels) =>
(
prints
("D0Eift0(", tknd,";");
prints(d0e1,";",dthn,";",dels,")"))
|
D0Eift1
(tknd,d0e1,dthn,dels,tinv) =>
(
prints
("D0Eift1(",tknd,";");
prints(d0e1,";",dthn,";",dels,";",tinv,")"))
//
|
D0Ecas0
(tknd,d0e1,tof0,tbar,dcls) =>
(
prints
("D0Ecas0(",tknd,";");
prints(d0e1,";",tof0,";",tbar,";",dcls,")"))
|
D0Ecas1
(tknd
,d0e1,tof0,tbar,dcls,tinv) =>
(
prints
("D0Ecas1(",tknd,";",d0e1,";");
prints(tof0,";",tbar,";",dcls,";",tinv,")"))
//
|
D0Etup1
(tbeg,topt,d0es,tend) =>
(
print("D0Etup1(");
prints(tbeg,";",topt,";",d0es,";",tend,")"))
|
D0Ercd2
(tbeg,topt,ldes,tend) =>
(
print("D0Ercd2(");
prints(tbeg,";",topt,";",ldes,";",tend,")"))
//
|
D0Elet0
(tknd,dcls,topt,d0es,tend) =>
(
prints("D0Elet0(",tknd,";");
prints(dcls,";",topt,";",d0es,";",tend,")"))
//
|
D0Etry0
(tknd
,d0es,twth,tbar,dcls,tend) =>
//
(
prints
("D0Etry0(",tknd,";",d0es,";");
prints(twth,";",tbar,";",dcls,";",tend,")"))
|
D0Elam0
(tknd
,farg,sres,arrw,body,tend) =>
(
prints
("D0Elam0(",tknd,";",farg,";");
prints(sres,";",arrw,";",body,";",tend,")"))
//
|
D0Efix0
(tknd,fid0
,farg,sres,arrw,body,tend) =>
(
print
("D0Efix0(");
prints(tknd,";",fid0,";",farg,";");
prints(sres,";",arrw,";",body,";",tend,")"))
//
|
D0Ewhere(d0e1,dcl2) =>
prints
("D0Ewhere(",d0e1,";",dcl2,")")
//
|
D0Ebrckt
(tbeg, d0es, tend) =>
prints
( "D0Ebrckt("
, tbeg , ";" , d0es , ";" , tend , ")")
|
D0Edtsel
(tknd, lab1, opt2) =>
prints
( "D0Edtsel("
, tknd , ";" , lab1 , ";" , opt2 , ")")
//
|
D0Eraise(tknd,d0e1) =>
prints("D0Eraise(", tknd, ";", d0e1, ")")
//
|
D0Eannot(d0e1,s0e2) =>
prints("D0Eannot(", d0e1, ";", s0e2, ")")
//
|
D0Equal0(tok1,d0e2) =>
prints("D0Equal0(", tok1, ";", d0e2, ")")
//
|
D0Eexists
(tknd,d0es,d0e1) =>
prints
("D0Eexists(",tknd,";",d0es,";",d0e1,")")
//
(* ****** ****** *)
//
|
D0Eextnam
(tknd,gnam) =>
prints("D0Eextnam(", tknd, ";", gnam, ")")
//
|
D0Esynext
(tknd,gexp) =>
prints("D0Esynext(", tknd, ";", gexp, ")")
//
(* ****** ****** *)
//
|
D0Etkerr(terr) => prints("D0Etkerr(", terr, ")")
//
|
D0Eerrck // HX: generated by [preadx0]
(lvl1(*err-level*),d0e2) => prints("D0Eerrck(",lvl1,";",d0e2,")")
//
end (*let*) // end of [ d0exp_fprint(d0e,out) ]

(* ****** ****** *)
//
#implfun
t0qua_fprint
( tqua, out ) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+ tqua of
|
T0QUAnone(terr) =>
prints("T0QUAnone(",terr,")")
|
T0QUAsome(tbeg,s0qs,tend) =>
prints("T0QUAsome(",tbeg,";",s0qs,";",tend,")")
//
end (*let*) // end of [t0qua_fprint(tqua,out)]
#implfun
t0inv_fprint
( tinv, out ) =
let
#impltmp
g_print$out<>() = out
in//let
case+ tinv of
|
T0INVnone(tqua,terr) =>
prints("T0INVnone(",tqua,";",terr,")")
|
T0INVsome(tqas,tbeg,d0ps,tend) =>
(
print("T0INVsome(");
prints(tqas,";",tbeg,";",d0ps,";",tend,")"))
end (*let*) // end of [t0inv_fprint(tinv,out)]
//
(* ****** ****** *)

#implfun
f0unarrw_fprint
  (arrw, out) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+ arrw of
|
F0UNARRWnone(tok) =>
prints("F0UNARRWnone(",tok,")")
|
F0UNARRWdflt(tok) =>
prints("F0UNARRWdflt(",tok,")")
|
F0UNARRWlist(tkb,ses,tke) =>
(
prints
("F0UNARRWlist(",tkb,";",ses,";",tke,")"))
//
end (*let*)//end-of-[f0unarrw_fprint(arrw,out)]

(* ****** ****** *)

#implfun
d0exp_THEN_fprint
  ( gthn, out ) =
(
case+ gthn of
|
d0exp_THEN_none(tok) =>
prints("d0exp_THEN_none(",tok,")")
|
d0exp_THEN_some(tok,d0e) =>
prints("d0exp_THEN(",tok,";",d0e,")")
) where
{
#impltmp g_print$out<>() = out
} (*where*) // end of [d0exp_THEN_fprint(...)]
#implfun
d0exp_ELSE_fprint
  ( gels, out ) =
(
case+ gels of
|
d0exp_ELSE_none(tok) =>
prints("d0exp_ELSE_none(",tok,")")
|
d0exp_ELSE_some(tok, d0e) =>
prints("d0exp_ELSE_some(",tok,";",d0e,")")
) where
{
#impltmp g_print$out<>() = out
} (*where*) // end of [d0exp_ELSE_fprint(...)]

(* ****** ****** *)

#implfun
d0pat_RPAREN_fprint
  ( drp, out ) =
let
#impltmp
g_print$out<>() = out
in//let
case+ drp of
|
d0pat_RPAREN_cons0(tbar) =>
prints("d0pat_RPAREN_cons0(",tbar,")")
|
d0pat_RPAREN_cons1(tok1, d0ps, tok2) =>
(
prints
("d0pat_RPAREN_cons1(",tok1,";",d0ps,";",tok2,")"))
end (*let*) // end of [d0pat_RPAREN_fprint(drp,out)]

(* ****** ****** *)

#implfun
l0d0p_RBRACE_fprint
  (ldrb, out) =
let
//
#impltmp
g_print$out<>() = out
//
in//let
case+ ldrb of
|
l0d0p_RBRACE_cons0(tbar) =>
prints("l0d0p_RBRACE_cons0(",tbar,")")
|
l0d0p_RBRACE_cons1(tok1, lses, tok2) =>
(
prints
("l0d0p_RBRACE_cons1(",tok1,";",lses,";",tok2,")"))
end (*let*) // end of [l0d0p_RBRACE_fprint(ldrb,out)]

(* ****** ****** *)

#implfun
d0exp_RPAREN_fprint
  ( drp, out ) =
let
#impltmp
g_print$out<>() = out
in//let
case+ drp of
|
d0exp_RPAREN_cons0(tbar) =>
prints("d0exp_RPAREN_cons0(",tbar,")")
|
d0exp_RPAREN_cons1(tok1, d0es, tok2) =>
prints
("d0exp_RPAREN_cons1(",tok1,";",d0es,";",tok2,")")
|
d0exp_RPAREN_cons2(tok1, d0es, tok2) =>
prints
("d0exp_RPAREN_cons2(",tok1,";",d0es,";",tok2,")")
end (*let*) // end of [d0exp_RPAREN_fprint(drp,out)]

(* ****** ****** *)

#implfun
l0d0e_RBRACE_fprint
  ( ldrb, out ) =
let
//
#impltmp
g_print$out<>() = out
//
in//let
case+ ldrb of
|
l0d0e_RBRACE_cons0(tbar) =>
prints("l0d0e_RBRACE_cons0(",tbar,")")
|
l0d0e_RBRACE_cons1(tok1, lses, tok2) =>
(
prints
("l0d0e_RBRACE_cons1(",tok1,";",lses,";",tok2,")"))
end (*let*) // end of [l0d0e_RBRACE_fprint(ldrb,out)]

(* ****** ****** *)

#implfun
d0ecl_fprint
( dcl, out ) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+
dcl.node() of
//
|
D0Ctkerr(tok) =>
prints("D0Ctkerr(",tok,")")
|
D0Ctkskp(tok) =>
prints("D0Ctkskp(",tok,")")
//
|
D0Cnonfix
(tknd,dnts) =>
prints("D0Cnonfix(",tknd,";",dnts,")")
|
D0Cfixity
(tknd,dnts,prec) =>
prints
("D0Cfixity(",tknd,";",dnts,";",prec,")")
//
|
D0Cstatic
(tknd,dcl1) =>
prints
("D0Cstatic(",tknd,";",dcl1,")")
|
D0Cextern
(tknd,dcl1) =>
prints
("D0Cextern(",tknd,";",dcl1,")")
//
|
D0Cdefine
(tknd,geid,gmas,gedf) =>
(
prints("D0Cdefine(",tknd,";");
prints(geid,";",gmas,";",gedf,")"))
|
D0Cmacdef
(tknd,geid,gmas,dedf) =>
(
prints("D0Cmacdef(",tknd,";");
prints(geid,";",gmas,";",dedf,")"))
//
|
D0Clocal0
(tknd,head,tin1,body,tend) =>
(
prints("D0Clocal0(",tknd,";");
prints(head,";",tin1,";",body,";",tend,")"))
//
|
D0Cabssort
(tknd,tid0) =>
prints
("D0Cabssort(",tknd,";",tid0,")")
|
D0Cstacst0
(tknd
,seid,tmas,tcln,s0t0) =>
(
prints("D0Cstacst0(",tknd,";");
prints(seid,";",tmas,";");prints(tcln,";",s0t0,")"))
|
D0Csortdef
(tknd,tid0,teq1,def2) =>
(
prints("D0Csortdef(",tknd,";");
prints(tid0,";",teq1,";",def2,")"))
//
|
D0Csexpdef
(tknd,sid0,smas,tres,teq1,def2) =>
(
prints("D0Csexpdef(",tknd,";");
prints(sid0,";",smas,";",tres,";");prints(teq1,";",def2,")"))
//
|
D0Cabstype
(tknd,seid,tmas,tres,atdf) =>
(
prints("D0Cabstype(",tknd,";");
prints
(seid,";",tmas,";",tres,";",atdf,")"))
|
D0Cabsopen(tknd, sqid) =>
prints("D0Cabsopen(",tknd,";",sqid,")")
|
D0Cabsimpl
(tknd,sid0,smas,tres,teq1,def2) =>
(
prints("D0Cabsimpl(",tknd,";");
prints(sid0,";",smas,";",tres,";");prints(teq1,";",def2,")"))
//
|
D0Csymload
(tknd,symb,twth,dqid,pval) =>
(
prints("D0Csymload(",tknd,";");
prints
(symb,";",twth,";",dqid,";",pval,")"))
//
|
D0Cinclude
(knd0,tknd,g0e1) =>
prints
("D0Cinclude(",knd0,";",tknd,";",g0e1,")")
|
D0Cstaload
(knd0,tknd,g0e1) =>
prints
("D0Cstaload(",knd0,";",tknd,";",g0e1,")")
//
|
D0Cdyninit(tknd,g0e1) =>
(
  prints("D0Cdyninit(",tknd,";",g0e1,")") )
//
(* ****** ****** *)
//
(*
HX-2024-07-20
Sat 20 Jul 2024 01:30:55 PM EDT
*)
|
D0Cextcode(tknd,g0e1) =>
(
  prints("D0Cextcode(",tknd,";",g0e1,")") )
//
(* ****** ****** *)
//
|
D0Cdatasort(tknd,dtcs) =>
(
  prints("D0Cdatasort(",tknd,";",dtcs,")") )
//
|
D0Cvaldclst(tknd,dcls) =>
(
  prints("D0Cvaldclst(",tknd,";",dcls,")") )
|
D0Cvardclst(tknd,dcls) =>
(
  prints("D0Cvardclst(",tknd,";",dcls,")") )
|
D0Cfundclst(tknd,t0qs,dcls) =>
prints("D0Cfundclst(",tknd,";",t0qs,";",dcls,")")
//
|
D0Cexcptcon(tknd,tbar,tcns) =>
prints("D0Cexcptcon(",tknd,";",tbar,";",tcns,")")
|
D0Cdatatype(tknd,dtps,wdcs) =>
prints("D0Cdatatype(",tknd,";",dtps,";",wdcs,")")
//
|
D0Cdynconst(tknd,tqas,dcls) =>
prints("D0Cdynconst(",tknd,";",tqas,";",dcls,")")
//
|
D0Cimplmnt0
(tknd,s0qs,t0qs,dqid
,t0is,farg,sres,teq1,d0e2) =>
(
prints("D0Cimplmnt0(",tknd,";");
prints(s0qs,";",t0qs,";",dqid,";");
prints(t0is,";",farg,";",sres,";",teq1,";",d0e2,")"))
//
|
D0Cerrck
(lvl(*err-level*),dcl) => prints("D0Cerrck(",lvl,";",dcl,")")
//
end (*let*) // end of [d0ecl_fprint(dcl,out)]

(* ****** ****** *)
//
#implfun
q0arg_fprint
( qag, out ) =
let
#impltmp
g_print$out<>() = out
in//in-of-let
case+
qag.node() of
| Q0ARGsome(id0,opt) =>
  prints("Q0ARGsome(",id0,";",opt,")")
end (*let*) // end of [q0arg_fprint(qag,out)]
//
#implfun
s0qag_fprint
( s0q, out ) =
let
#impltmp
g_print$out<>() = out
in//in-of-let
case+
s0q.node() of
|
S0QAGnone(tok) =>
prints("S0QAGnone(",tok,")")
|
S0QAGsome(tkb,qas,tke) =>
prints("S0QAGsome(",tkb,";",qas,";",tke,")")
end (*let*) // end of [s0qag_fprint(s0q,out)]
//
#implfun
t0qag_fprint
( t0q, out ) =
let
#impltmp
g_print$out<>() = out
in//in-of-let
case+
t0q.node() of
|
T0QAGnone(tok) =>
prints("T0QAGnone(",tok,")")
|
T0QAGsome(tkb,qas,tke) =>
prints("T0QAGsome(",tkb,";",qas,";",tke,")")
end (*let*) // end of [t0qag_fprint(t0q,out)]
//
(* ****** ****** *)
//
#implfun
t0iag_fprint
( t0i, out ) =
let
#impltmp
g_print$out<>() = out
in//in-of-let
case+
t0i.node() of
|
T0IAGnone(tok) =>
prints("T0IAGnone(",tok,")")
|
T0IAGsome(tkb,ses,tke) =>
prints("T0IAGsome(",tkb,";",ses,";",tke,")")
end (*let*) // end of [t0iag_fprint(t0i,out)]
//
(* ****** ****** *)
//
#implfun
a0typ_fprint
( a0t, out ) =
let
#impltmp
g_print$out<>() = out
in//in-of-let
//
case+
a0t.node() of
|
A0TYPsome(s0e1,topt) =>
(
  prints("A0TYPsome(",s0e1,";",topt,")"))
end (*let*) // end of [a0typ_fprint(a0t,out)]
//
(* ****** ****** *)
//
#implfun
d0arg_fprint
( d0a, out ) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+
d0a.node() of
|
D0ARGnone
(  tok0  ) =>
prints("D0ARGnone(",tok0,")")
|
D0ARGsta0
(tbeg,sqas,tend) =>
prints
("D0ARGsta0(",tbeg,";",sqas,";",tend,")")
|
D0ARGdyn1
(  dpid  ) =>
prints("D0ARGdyn1(",dpid,")")
|
D0ARGdyn2
(tbeg,a0ts,atsq,tend) =>
prints
("D0ARGdyn2(",tbeg,";",a0ts,";",atsq,";",tend,")")
//
end (*let*) // end of [d0arg_fprint(d0a,out)]
//
(* ****** ****** *)

#implfun
g0edf_fprint
( gedf, out ) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+ gedf of
|
G0EDFnone() =>
prints("G0EDFnone(", ")")
|
G0EDFsome(topt,g0e1) =>
prints("G0EDFsome(",topt,";",g0e1,")")
//
end (*let*) // end of [g0edf_fprint(gedf,out)]

(* ****** ****** *)

#implfun
d0edf_fprint
( dedf, out ) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+ dedf of
|
D0EDFnone() =>
prints("D0EDFnone(", ")")
|
D0EDFsome(topt,d0e1) =>
prints("D0EDFsome(",topt,";",d0e1,")")
//
end (*let*) // end of [d0edf_fprint(dedf,out)]

(* ****** ****** *)

#implfun
a0tdf_fprint
( atdf, out ) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+ atdf of
|
A0TDFsome() =>
prints("A0TDFsome(", ")")
|
A0TDFlteq(tok,s0e) =>
prints("A0TDFlteq(",tok,";",s0e,")")
|
A0TDFeqeq(tok,s0e) =>
prints("A0TDFeqeq(",tok,";",s0e,")")
//
end (*let*) // end of [a0tdf_fprint(atdf,out)]

(* ****** ****** *)
//
#implfun
precopt_fprint
 ( popt, out ) =
(
case+ popt of
|
PRECnil0() =>
print("PRECnil0()")
|
PRECint1(int) =>
prints("PRECint1(", int, ")")
|
PRECopr2(opr, pmd) =>
prints("PRECopr2(", opr, ";", pmd, ")")
) where
{
  #impltmp g_print$out<>() = out
} (*where*) // end of [precopt_fprint(...)]
//
#implfun
precint_fprint
 ( pint, out ) =
(
case+ pint of
|
PINTint1(int) =>
prints("PINTint1(", int, ")")
|
PINTopr2(opr, int) =>
prints("PINTopr2(", opr, ";", int, ")")
) where
{
  #impltmp g_print$out<>() = out
} (*where*) // end of [precint_fprint(...)]
//
#implfun
precmod_fprint
  (pmod, out) =
let
#impltmp
g_print$out<>() = out
in//let
case+ pmod of
|
PMODnone((*void*)) =>
prints("PRECMODnone(", ")")
|
PMODsome(tkb, int, tke) =>
prints
("PMODsome(", tkb, ";", int, ";", tke, ")")
end (*let*) // end of [precmod_fprint(...)]
//
(* ****** ****** *)
//
#implfun
s0res_fprint
( sres, out ) =
let
#implfun
g_print$out<>() = out
in//let
case+ sres of
|
S0RESnone() =>
prints("S0RESnone(",")")
|
S0RESsome(seff, s0e1) =>
prints("S0RESsome(",seff,";",s0e1,")")
end (*let*) // end of [s0res_fprint(...)]
//
#implfun
s0eff_fprint
( seff, out ) =
let
#implfun
g_print$out<>() = out
in//let
case+ seff of
|
S0EFFnone(tok0) =>
prints("S0EFFnone(",tok0,")")
|
S0EFFsome(tbeg,s0fs,tend) =>
prints
("S0EFFsome(",tbeg,";",s0fs,";",tend,")")
end (*let*) // end of [s0eff_fprint(...)]
//
(* ****** ****** *)
//
#implfun
d0res_fprint
( dres, out ) =
let
#implfun
g_print$out<>() = out
in//let
case+ dres of
|
D0RESnone() =>
prints("D0RESnone(",")")
|
D0RESsome(teq0, s0e1) =>
prints("D0RESsome(",teq0,";",s0e1,")")
end (*let*) // end of [d0res_fprint(...)]
//
(* ****** ****** *)

#implfun
d0valdcl_fprint
 ( dval, out ) = let
//
val dpat = dval.dpat()
val tdxp = dval.tdxp()
val wsxp = dval.wsxp()
//
#impltmp g_print$out<>() = out
//
in//let
(
prints
("D0VALDCL(",dpat,";",tdxp,",",wsxp,")"))
end(*let*)//end-of-[d0valdcl_fprint(dval,out)]

(* ****** ****** *)

#implfun
d0vardcl_fprint
 ( dvar, out ) = let
//
val dpid = dvar.dpid()
val vpid = dvar.vpid()
val sres = dvar.sres()
val dini = dvar.dini()
//
#impltmp g_print$out<>() = out
//
in//let
(
print("D0VARDCL(");
prints
(dpid,";",vpid,";",sres,",",dini,")"))
end(*let*)//end-of-[d0vardcl_fprint(dvar,out)]

(* ****** ****** *)

#implfun
d0fundcl_fprint
 ( dfun, out ) = let
//
val dpid = dfun.dpid()
val farg = dfun.farg()
val sres = dfun.sres()
val tdxp = dfun.tdxp()
val wsxp = dfun.wsxp()
//
#impltmp g_print$out<>() = out
//
in//let
(
prints("D0FUNDCL(",dpid,";");
prints
(farg,";",sres,";",tdxp,",",wsxp,")"))
end(*let*)//end-of-[d0fundcl_fprint(dfun,out)]

(* ****** ****** *)

#implfun
d0cstdcl_fprint
 ( dcst, out ) =
let
//
(*
val lctn = dcst.lctn()
*)
val dpid = dcst.dpid()
val darg = dcst.darg()
val sres = dcst.sres()
val dres = dcst.dres()
//
#impltmp g_print$out<>() = out
//
in//let
prints
("D0CSTDCL("
,dpid,";",darg,";",sres,";",dres,")")
end (*let*) // end of [d0cstdcl_fprint]

(* ****** ****** *)

#implfun
d0parsed_fprint
 ( dpar, out ) = let
//
val
stadyn =
d0parsed_get_stadyn(dpar)
val
nerror =
d0parsed_get_nerror(dpar)
val
source =
d0parsed_get_source(dpar)
val
parsed =
d0parsed_get_parsed(dpar)
//
#impltmp g_print$out<>() = out
//
in//let
(
print("D0PARSED(");
prints
(stadyn,";",nerror,";",source,";",parsed,")"))
end(*let*)//end-of-[d0parsed_fprint(dpar,out)]

(* ****** ****** *)
//
#implfun
wd0eclseq_fprint
 ( wdcs , out ) =
let
#impltmp g_print$out<>() = out
in//let
case+ wdcs of
|
WD0CSnone() =>
prints("WD0CSnone(", ")")
|
WD0CSsome(tbeg, topt, dcls, tend) =>
(
prints
("WD0CSsome(",tbeg,";",topt,";",dcls,";",tend,")"))
end (*let*) // end of [ wd0eclseq_fprint(wdcs,out) ]
//
(* ****** ****** *)
//
#implfun
tkend_WHERE_fprint
  ( tend , out ) =
let
#impltmp g_print$out<>() = out
//
in//let
case+ tend of
|
tkend_WHERE_cons1(tok1) =>
prints("tkend_WHERE_cons1(",tok1,")")
(*
|
tkend_WHERE_cons2(tok1,topt) =>
prints("tkend_WHERE_cons2(",tok1,";",topt,")")
*)
end (*let*) // end of [ tkend_WHERE_fprint(tend,out) ]
//
(* ****** ****** *)
//
#implfun
d0eclseq_WHERE_fprint
  ( wdcs , out ) =
let
#impltmp g_print$out<>() = out
//
in//let
case+ wdcs of
|
d0eclseq_WHERE
(tbeg, topt, dcls, tend) =>
(
prints
("d0eclseq_WHERE(",tbeg,";",topt,";",dcls,";",tend,")")
)
end (*let*) // end of [ d0eclseq_WHERE_fprint(wdcs,out) ]
//
(* ****** ****** *)

(* end of [ATS3/XATSOPT_srcgen2_DATS_dynexp0_print0.dats] *)
